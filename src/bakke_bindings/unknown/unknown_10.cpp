#include "pch.h"
#include <bakkesmod/wrappers/Engine/EngineTAWrapper.h>
#include <bakkesmod/wrappers/Engine/UnrealStringWrapper.h>
#include <bakkesmod/wrappers/GameEvent/ReplayDirectorWrapper.h>
#include <bakkesmod/wrappers/GameEvent/ReplaySoccarWrapper.h>
#include <bakkesmod/wrappers/GameObject/BaseCameraWrapper.h>
#include <bakkesmod/wrappers/GameObject/CarComponent/AirControlComponentWrapper.h>
#include <bakkesmod/wrappers/GameObject/CarComponent/BoostWrapper.h>
#include <bakkesmod/wrappers/GameObject/CarComponent/FlipCarComponentWrapper.h>
#include <bakkesmod/wrappers/GameObject/CarComponent/PrimitiveComponentWrapper.h>
#include <bakkesmod/wrappers/StructArrayWrapper.h>
#include <bakkesmod/wrappers/arraywrapper.h>
#include <iterator>
#include <memory>
#include <sstream> // __str__
#include <string>


void bind_unknown_unknown_10(py::module &M)
{
	{ // TeamGameEventWrapper file: line:11
		pybind11::class_<TeamGameEventWrapper, std::shared_ptr<TeamGameEventWrapper>, GameEventWrapper> cl(M, "TeamGameEventWrapper");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init<unsigned long>(), pybind11::arg("mem") );

		cl.def( pybind11::init( [](TeamGameEventWrapper const &o){ return new TeamGameEventWrapper(o); } ) );
		cl.def("assign", (class TeamGameEventWrapper & (TeamGameEventWrapper::*)(class TeamGameEventWrapper)) &TeamGameEventWrapper::operator=, "C++: TeamGameEventWrapper::operator=(class TeamGameEventWrapper) --> class TeamGameEventWrapper &", pybind11::return_value_policy::automatic, pybind11::arg("rhs"));
		cl.def("GetTeamArchetypes", (class ArrayWrapper<class TeamWrapper> (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::GetTeamArchetypes, "C++: TeamGameEventWrapper::GetTeamArchetypes() --> class ArrayWrapper<class TeamWrapper>");
		cl.def("GetTeams", (class ArrayWrapper<class TeamWrapper> (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::GetTeams, "C++: TeamGameEventWrapper::GetTeams() --> class ArrayWrapper<class TeamWrapper>");
		cl.def("GetMaxTeamSize", (int (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::GetMaxTeamSize, "C++: TeamGameEventWrapper::GetMaxTeamSize() --> int");
		cl.def("SetMaxTeamSize", (void (TeamGameEventWrapper::*)(int)) &TeamGameEventWrapper::SetMaxTeamSize, "C++: TeamGameEventWrapper::SetMaxTeamSize(int) --> void", pybind11::arg("newMaxTeamSize"));
		cl.def("GetNumBots", (int (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::GetNumBots, "C++: TeamGameEventWrapper::GetNumBots() --> int");
		cl.def("SetNumBots", (void (TeamGameEventWrapper::*)(int)) &TeamGameEventWrapper::SetNumBots, "C++: TeamGameEventWrapper::SetNumBots(int) --> void", pybind11::arg("newNumBots"));
		cl.def("GetbMuteOppositeTeams", (unsigned long (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::GetbMuteOppositeTeams, "C++: TeamGameEventWrapper::GetbMuteOppositeTeams() --> unsigned long");
		cl.def("SetbMuteOppositeTeams", (void (TeamGameEventWrapper::*)(unsigned long)) &TeamGameEventWrapper::SetbMuteOppositeTeams, "C++: TeamGameEventWrapper::SetbMuteOppositeTeams(unsigned long) --> void", pybind11::arg("newbMuteOppositeTeams"));
		cl.def("GetbDisableMutingOtherTeam", (unsigned long (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::GetbDisableMutingOtherTeam, "C++: TeamGameEventWrapper::GetbDisableMutingOtherTeam() --> unsigned long");
		cl.def("SetbDisableMutingOtherTeam", (void (TeamGameEventWrapper::*)(unsigned long)) &TeamGameEventWrapper::SetbDisableMutingOtherTeam, "C++: TeamGameEventWrapper::SetbDisableMutingOtherTeam(unsigned long) --> void", pybind11::arg("newbDisableMutingOtherTeam"));
		cl.def("GetbForfeit", (unsigned long (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::GetbForfeit, "C++: TeamGameEventWrapper::GetbForfeit() --> unsigned long");
		cl.def("SetbForfeit", (void (TeamGameEventWrapper::*)(unsigned long)) &TeamGameEventWrapper::SetbForfeit, "C++: TeamGameEventWrapper::SetbForfeit(unsigned long) --> void", pybind11::arg("newbForfeit"));
		cl.def("GetbUnfairTeams", (unsigned long (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::GetbUnfairTeams, "C++: TeamGameEventWrapper::GetbUnfairTeams() --> unsigned long");
		cl.def("SetbUnfairTeams", (void (TeamGameEventWrapper::*)(unsigned long)) &TeamGameEventWrapper::SetbUnfairTeams, "C++: TeamGameEventWrapper::SetbUnfairTeams(unsigned long) --> void", pybind11::arg("newbUnfairTeams"));
		cl.def("GetbAlwaysAutoSelectTeam", (unsigned long (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::GetbAlwaysAutoSelectTeam, "C++: TeamGameEventWrapper::GetbAlwaysAutoSelectTeam() --> unsigned long");
		cl.def("SetbAlwaysAutoSelectTeam", (void (TeamGameEventWrapper::*)(unsigned long)) &TeamGameEventWrapper::SetbAlwaysAutoSelectTeam, "C++: TeamGameEventWrapper::SetbAlwaysAutoSelectTeam(unsigned long) --> void", pybind11::arg("newbAlwaysAutoSelectTeam"));
		cl.def("StartRematchVote", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::StartRematchVote, "C++: TeamGameEventWrapper::StartRematchVote() --> void");
		cl.def("CheckRematchVote", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::CheckRematchVote, "C++: TeamGameEventWrapper::CheckRematchVote() --> void");
		cl.def("__GameEvent_Team_TA__AllTeamsHaveHumans", (bool (TeamGameEventWrapper::*)(class TeamWrapper)) &TeamGameEventWrapper::__GameEvent_Team_TA__AllTeamsHaveHumans, "C++: TeamGameEventWrapper::__GameEvent_Team_TA__AllTeamsHaveHumans(class TeamWrapper) --> bool", pybind11::arg("Team"));
		cl.def("UpdatePlayerShortcuts", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::UpdatePlayerShortcuts, "C++: TeamGameEventWrapper::UpdatePlayerShortcuts() --> void");
		cl.def("ClearTemporarySpawnSpots", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::ClearTemporarySpawnSpots, "C++: TeamGameEventWrapper::ClearTemporarySpawnSpots() --> void");
		cl.def("ChooseTeam", (bool (TeamGameEventWrapper::*)(int, class PlayerControllerWrapper)) &TeamGameEventWrapper::ChooseTeam, "C++: TeamGameEventWrapper::ChooseTeam(int, class PlayerControllerWrapper) --> bool", pybind11::arg("TeamIndex"), pybind11::arg("Player"));
		cl.def("CanChangeTeam", (bool (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::CanChangeTeam, "C++: TeamGameEventWrapper::CanChangeTeam() --> bool");
		cl.def("OnPenaltyChanged", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::OnPenaltyChanged, "C++: TeamGameEventWrapper::OnPenaltyChanged() --> void");
		cl.def("OnTeamForfeited", (void (TeamGameEventWrapper::*)(class TeamWrapper)) &TeamGameEventWrapper::OnTeamForfeited, "C++: TeamGameEventWrapper::OnTeamForfeited(class TeamWrapper) --> void", pybind11::arg("Team"));
		cl.def("HandleTeamForfeit", (void (TeamGameEventWrapper::*)(class TeamWrapper)) &TeamGameEventWrapper::HandleTeamForfeit, "C++: TeamGameEventWrapper::HandleTeamForfeit(class TeamWrapper) --> void", pybind11::arg("Team"));
		cl.def("MuteOppositeTeams2", (void (TeamGameEventWrapper::*)(unsigned long)) &TeamGameEventWrapper::MuteOppositeTeams2, "C++: TeamGameEventWrapper::MuteOppositeTeams2(unsigned long) --> void", pybind11::arg("bMute"));
		cl.def("UpdateBotCount", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::UpdateBotCount, "C++: TeamGameEventWrapper::UpdateBotCount() --> void");
		cl.def("FindBotReplacement", (bool (TeamGameEventWrapper::*)(class PriWrapper)) &TeamGameEventWrapper::FindBotReplacement, "C++: TeamGameEventWrapper::FindBotReplacement(class PriWrapper) --> bool", pybind11::arg("PRI"));
		cl.def("EndGame", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::EndGame, "C++: TeamGameEventWrapper::EndGame() --> void");
		cl.def("ForceNoContest", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::ForceNoContest, "C++: TeamGameEventWrapper::ForceNoContest() --> void");
		cl.def("AddTemporarySpawnSpot", (void (TeamGameEventWrapper::*)(class TeamWrapper, class CarWrapper)) &TeamGameEventWrapper::AddTemporarySpawnSpot, "C++: TeamGameEventWrapper::AddTemporarySpawnSpot(class TeamWrapper, class CarWrapper) --> void", pybind11::arg("Team"), pybind11::arg("Car"));
		cl.def("HandleSelectedLoadout", (void (TeamGameEventWrapper::*)(class PriWrapper)) &TeamGameEventWrapper::HandleSelectedLoadout, "C++: TeamGameEventWrapper::HandleSelectedLoadout(class PriWrapper) --> void", pybind11::arg("PlayerPRI"));
		cl.def("DestroyTeams", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::DestroyTeams, "C++: TeamGameEventWrapper::DestroyTeams() --> void");
		cl.def("OnAllTeamsCreated", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::OnAllTeamsCreated, "C++: TeamGameEventWrapper::OnAllTeamsCreated() --> void");
		cl.def("AssignCustomTeamSettings", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::AssignCustomTeamSettings, "C++: TeamGameEventWrapper::AssignCustomTeamSettings() --> void");
		cl.def("OnMatchSettingsChanged", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::OnMatchSettingsChanged, "C++: TeamGameEventWrapper::OnMatchSettingsChanged() --> void");
		cl.def("AllTeamsHaveHumans2", (bool (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::AllTeamsHaveHumans2, "C++: TeamGameEventWrapper::AllTeamsHaveHumans2() --> bool");
		cl.def("AllTeamsCreated2", (bool (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::AllTeamsCreated2, "C++: TeamGameEventWrapper::AllTeamsCreated2() --> bool");
		cl.def("SetTeam", (void (TeamGameEventWrapper::*)(int, class TeamWrapper)) &TeamGameEventWrapper::SetTeam, "C++: TeamGameEventWrapper::SetTeam(int, class TeamWrapper) --> void", pybind11::arg("TeamNum"), pybind11::arg("NewTeam"));
		cl.def("CreateTeams", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::CreateTeams, "C++: TeamGameEventWrapper::CreateTeams() --> void");
		cl.def("PreloadBots", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::PreloadBots, "C++: TeamGameEventWrapper::PreloadBots() --> void");
		cl.def("OnInit", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::OnInit, "C++: TeamGameEventWrapper::OnInit() --> void");
		cl.def("SetMaxTeamSize2", (void (TeamGameEventWrapper::*)(int)) &TeamGameEventWrapper::SetMaxTeamSize2, "C++: TeamGameEventWrapper::SetMaxTeamSize2(int) --> void", pybind11::arg("MaxSize"));
		cl.def("UpdateMaxTeamSize", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::UpdateMaxTeamSize, "C++: TeamGameEventWrapper::UpdateMaxTeamSize() --> void");
		cl.def("SetUnfairTeams", (void (TeamGameEventWrapper::*)(unsigned long)) &TeamGameEventWrapper::SetUnfairTeams, "C++: TeamGameEventWrapper::SetUnfairTeams(unsigned long) --> void", pybind11::arg("bUnfair"));
		cl.def("InitBotSkill", (void (TeamGameEventWrapper::*)()) &TeamGameEventWrapper::InitBotSkill, "C++: TeamGameEventWrapper::InitBotSkill() --> void");
	}
	{ // ServerWrapper file: line:15
		pybind11::class_<ServerWrapper, std::shared_ptr<ServerWrapper>, TeamGameEventWrapper> cl(M, "ServerWrapper");
		pybind11::handle cl_type = cl;

		cl.def( pybind11::init<unsigned long>(), pybind11::arg("mem") );

		cl.def( pybind11::init( [](ServerWrapper const &o){ return new ServerWrapper(o); } ) );
		cl.def("assign", (class ServerWrapper & (ServerWrapper::*)(class ServerWrapper)) &ServerWrapper::operator=, "C++: ServerWrapper::operator=(class ServerWrapper) --> class ServerWrapper &", pybind11::return_value_policy::automatic, pybind11::arg("rhs"));
		cl.def("GetBall", (class BallWrapper (ServerWrapper::*)()) &ServerWrapper::GetBall, "C++: ServerWrapper::GetBall() --> class BallWrapper");
		cl.def("SpawnBall", (class BallWrapper (ServerWrapper::*)(const struct Vector, bool, bool)) &ServerWrapper::SpawnBall, "C++: ServerWrapper::SpawnBall(const struct Vector, bool, bool) --> class BallWrapper", pybind11::arg("position"), pybind11::arg("wake"), pybind11::arg("spawnCannon"));
		cl.def("HasAuthority", (bool (ServerWrapper::*)()) &ServerWrapper::HasAuthority, "C++: ServerWrapper::HasAuthority() --> bool");
		cl.def("SetGameSpeed", (void (ServerWrapper::*)(float)) &ServerWrapper::SetGameSpeed, "C++: ServerWrapper::SetGameSpeed(float) --> void", pybind11::arg("GameSpeed"));
		cl.def("GetGameSpeed", (float (ServerWrapper::*)()) &ServerWrapper::GetGameSpeed, "C++: ServerWrapper::GetGameSpeed() --> float");
		cl.def("SetSecondsElapsed", (void (ServerWrapper::*)(float)) &ServerWrapper::SetSecondsElapsed, "C++: ServerWrapper::SetSecondsElapsed(float) --> void", pybind11::arg("SecondsElapsed"));
		cl.def("GetSecondsElapsed", (float (ServerWrapper::*)()) &ServerWrapper::GetSecondsElapsed, "C++: ServerWrapper::GetSecondsElapsed() --> float");
		cl.def("GetGameCar", (class CarWrapper (ServerWrapper::*)()) &ServerWrapper::GetGameCar, "C++: ServerWrapper::GetGameCar() --> class CarWrapper");
		cl.def("IsBallMovingTowardsGoal", (bool (ServerWrapper::*)(int, class BallWrapper)) &ServerWrapper::IsBallMovingTowardsGoal, "C++: ServerWrapper::IsBallMovingTowardsGoal(int, class BallWrapper) --> bool", pybind11::arg("goalNo"), pybind11::arg("bw"));
		cl.def("IsInGoal", (bool (ServerWrapper::*)(struct Vector)) &ServerWrapper::IsInGoal, "C++: ServerWrapper::IsInGoal(struct Vector) --> bool", pybind11::arg("vec"));
		cl.def("DisableGoalReset", (void (ServerWrapper::*)()) &ServerWrapper::DisableGoalReset, "C++: ServerWrapper::DisableGoalReset() --> void");
		cl.def("EnableGoalReset", (void (ServerWrapper::*)()) &ServerWrapper::EnableGoalReset, "C++: ServerWrapper::EnableGoalReset() --> void");
		cl.def("GenerateShot", (struct Vector (ServerWrapper::*)(struct Vector, struct Vector, float)) &ServerWrapper::GenerateShot, "C++: ServerWrapper::GenerateShot(struct Vector, struct Vector, float) --> struct Vector", pybind11::arg("startPos"), pybind11::arg("destination"), pybind11::arg("speed"));
		cl.def("GenerateGoalAimLocation", (struct Vector (ServerWrapper::*)(int, struct Vector)) &ServerWrapper::GenerateGoalAimLocation, "C++: ServerWrapper::GenerateGoalAimLocation(int, struct Vector) --> struct Vector", pybind11::arg("goalNumber"), pybind11::arg("currentBallLocation"));
		cl.def("GetGoalExtent", [](ServerWrapper &o) -> Vector { return o.GetGoalExtent(); }, "");
		cl.def("GetGoalExtent", (struct Vector (ServerWrapper::*)(int)) &ServerWrapper::GetGoalExtent, "C++: ServerWrapper::GetGoalExtent(int) --> struct Vector", pybind11::arg("goalNumber"));
		cl.def("GetGoalLocation", [](ServerWrapper &o) -> Vector { return o.GetGoalLocation(); }, "");
		cl.def("GetGoalLocation", (struct Vector (ServerWrapper::*)(int)) &ServerWrapper::GetGoalLocation, "C++: ServerWrapper::GetGoalLocation(int) --> struct Vector", pybind11::arg("goalNumber"));
		cl.def("GetTestCarArchetype", (class CarWrapper (ServerWrapper::*)()) &ServerWrapper::GetTestCarArchetype, "C++: ServerWrapper::GetTestCarArchetype() --> class CarWrapper");
		cl.def("SetTestCarArchetype", (void (ServerWrapper::*)(class CarWrapper)) &ServerWrapper::SetTestCarArchetype, "C++: ServerWrapper::SetTestCarArchetype(class CarWrapper) --> void", pybind11::arg("newTestCarArchetype"));
		cl.def("GetBallArchetype", (class BallWrapper (ServerWrapper::*)()) &ServerWrapper::GetBallArchetype, "C++: ServerWrapper::GetBallArchetype() --> class BallWrapper");
		cl.def("SetBallArchetype", (void (ServerWrapper::*)(class BallWrapper)) &ServerWrapper::SetBallArchetype, "C++: ServerWrapper::SetBallArchetype(class BallWrapper) --> void", pybind11::arg("newBallArchetype"));
		cl.def("GetBallSpawnPoint", (class ActorWrapper (ServerWrapper::*)()) &ServerWrapper::GetBallSpawnPoint, "C++: ServerWrapper::GetBallSpawnPoint() --> class ActorWrapper");
		cl.def("SetBallSpawnPoint", (void (ServerWrapper::*)(class ActorWrapper)) &ServerWrapper::SetBallSpawnPoint, "C++: ServerWrapper::SetBallSpawnPoint(class ActorWrapper) --> void", pybind11::arg("newBallSpawnPoint"));
		cl.def("GetSeriesLength", (int (ServerWrapper::*)()) &ServerWrapper::GetSeriesLength, "C++: ServerWrapper::GetSeriesLength() --> int");
		cl.def("SetSeriesLength", (void (ServerWrapper::*)(int)) &ServerWrapper::SetSeriesLength, "C++: ServerWrapper::SetSeriesLength(int) --> void", pybind11::arg("newSeriesLength"));
		cl.def("GetGameTime", (int (ServerWrapper::*)()) &ServerWrapper::GetGameTime, "C++: ServerWrapper::GetGameTime() --> int");
		cl.def("SetGameTime", (void (ServerWrapper::*)(int)) &ServerWrapper::SetGameTime, "C++: ServerWrapper::SetGameTime(int) --> void", pybind11::arg("newGameTime"));
		cl.def("GetWarmupTime", (int (ServerWrapper::*)()) &ServerWrapper::GetWarmupTime, "C++: ServerWrapper::GetWarmupTime() --> int");
		cl.def("SetWarmupTime", (void (ServerWrapper::*)(int)) &ServerWrapper::SetWarmupTime, "C++: ServerWrapper::SetWarmupTime(int) --> void", pybind11::arg("newWarmupTime"));
		cl.def("GetMaxScore", (int (ServerWrapper::*)()) &ServerWrapper::GetMaxScore, "C++: ServerWrapper::GetMaxScore() --> int");
		cl.def("SetMaxScore", (void (ServerWrapper::*)(int)) &ServerWrapper::SetMaxScore, "C++: ServerWrapper::SetMaxScore(int) --> void", pybind11::arg("newMaxScore"));
		cl.def("GetAutoBalanceDifference", (int (ServerWrapper::*)()) &ServerWrapper::GetAutoBalanceDifference, "C++: ServerWrapper::GetAutoBalanceDifference() --> int");
		cl.def("SetAutoBalanceDifference", (void (ServerWrapper::*)(int)) &ServerWrapper::SetAutoBalanceDifference, "C++: ServerWrapper::SetAutoBalanceDifference(int) --> void", pybind11::arg("newAutoBalanceDifference"));
		//cl.def("GetLastTrialTime", (int (ServerWrapper::*)()) &ServerWrapper::GetLastTrialTime, "C++: ServerWrapper::GetLastTrialTime() --> int");
		//cl.def("SetLastTrialTime", (void (ServerWrapper::*)(int)) &ServerWrapper::SetLastTrialTime, "C++: ServerWrapper::SetLastTrialTime(int) --> void", pybind11::arg("newLastTrialTime"));
		cl.def("GetScoreSlomoTime", (float (ServerWrapper::*)()) &ServerWrapper::GetScoreSlomoTime, "C++: ServerWrapper::GetScoreSlomoTime() --> float");
		cl.def("SetScoreSlomoTime", (void (ServerWrapper::*)(float)) &ServerWrapper::SetScoreSlomoTime, "C++: ServerWrapper::SetScoreSlomoTime(float) --> void", pybind11::arg("newScoreSlomoTime"));
		cl.def("GetGameTimeRemaining", (float (ServerWrapper::*)()) &ServerWrapper::GetGameTimeRemaining, "C++: ServerWrapper::GetGameTimeRemaining() --> float");
		cl.def("SetGameTimeRemaining", (void (ServerWrapper::*)(float)) &ServerWrapper::SetGameTimeRemaining, "C++: ServerWrapper::SetGameTimeRemaining(float) --> void", pybind11::arg("newGameTimeRemaining"));
		cl.def("GetSecondsRemaining", (int (ServerWrapper::*)()) &ServerWrapper::GetSecondsRemaining, "C++: ServerWrapper::GetSecondsRemaining() --> int");
		cl.def("SetSecondsRemaining", (void (ServerWrapper::*)(int)) &ServerWrapper::SetSecondsRemaining, "C++: ServerWrapper::SetSecondsRemaining(int) --> void", pybind11::arg("newSecondsRemaining"));
		cl.def("GetWaitTimeRemaining", (int (ServerWrapper::*)()) &ServerWrapper::GetWaitTimeRemaining, "C++: ServerWrapper::GetWaitTimeRemaining() --> int");
		cl.def("SetWaitTimeRemaining", (void (ServerWrapper::*)(int)) &ServerWrapper::SetWaitTimeRemaining, "C++: ServerWrapper::SetWaitTimeRemaining(int) --> void", pybind11::arg("newWaitTimeRemaining"));
		cl.def("GetTotalGameTimePlayed", (float (ServerWrapper::*)()) &ServerWrapper::GetTotalGameTimePlayed, "C++: ServerWrapper::GetTotalGameTimePlayed() --> float");
		cl.def("SetTotalGameTimePlayed", (void (ServerWrapper::*)(float)) &ServerWrapper::SetTotalGameTimePlayed, "C++: ServerWrapper::SetTotalGameTimePlayed(float) --> void", pybind11::arg("newTotalGameTimePlayed"));
		cl.def("GetOvertimeTimePlayed", (float (ServerWrapper::*)()) &ServerWrapper::GetOvertimeTimePlayed, "C++: ServerWrapper::GetOvertimeTimePlayed() --> float");
		cl.def("SetOvertimeTimePlayed", (void (ServerWrapper::*)(float)) &ServerWrapper::SetOvertimeTimePlayed, "C++: ServerWrapper::SetOvertimeTimePlayed(float) --> void", pybind11::arg("newOvertimeTimePlayed"));
		cl.def("GetbRoundActive", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbRoundActive, "C++: ServerWrapper::GetbRoundActive() --> unsigned long");
		cl.def("SetbRoundActive", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbRoundActive, "C++: ServerWrapper::SetbRoundActive(unsigned long) --> void", pybind11::arg("newbRoundActive"));
		cl.def("GetbPlayReplays", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbPlayReplays, "C++: ServerWrapper::GetbPlayReplays() --> unsigned long");
		cl.def("SetbPlayReplays", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbPlayReplays, "C++: ServerWrapper::SetbPlayReplays(unsigned long) --> void", pybind11::arg("newbPlayReplays"));
		cl.def("GetbBallHasBeenHit", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbBallHasBeenHit, "C++: ServerWrapper::GetbBallHasBeenHit() --> unsigned long");
		cl.def("SetbBallHasBeenHit", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbBallHasBeenHit, "C++: ServerWrapper::SetbBallHasBeenHit(unsigned long) --> void", pybind11::arg("newbBallHasBeenHit"));
		cl.def("GetbOverTime", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbOverTime, "C++: ServerWrapper::GetbOverTime() --> unsigned long");
		cl.def("SetbOverTime", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbOverTime, "C++: ServerWrapper::SetbOverTime(unsigned long) --> void", pybind11::arg("newbOverTime"));
		cl.def("GetbUnlimitedTime", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbUnlimitedTime, "C++: ServerWrapper::GetbUnlimitedTime() --> unsigned long");
		cl.def("SetbUnlimitedTime", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbUnlimitedTime, "C++: ServerWrapper::SetbUnlimitedTime(unsigned long) --> void", pybind11::arg("newbUnlimitedTime"));
		//cl.def("GetbKickOnTrialEnd", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbKickOnTrialEnd, "C++: ServerWrapper::GetbKickOnTrialEnd() --> unsigned long");
		//cl.def("SetbKickOnTrialEnd", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbKickOnTrialEnd, "C++: ServerWrapper::SetbKickOnTrialEnd(unsigned long) --> void", pybind11::arg("newbKickOnTrialEnd"));
		cl.def("GetbNoContest", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbNoContest, "C++: ServerWrapper::GetbNoContest() --> unsigned long");
		cl.def("SetbNoContest", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbNoContest, "C++: ServerWrapper::SetbNoContest(unsigned long) --> void", pybind11::arg("newbNoContest"));
		cl.def("GetbDisableGoalDelay", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbDisableGoalDelay, "C++: ServerWrapper::GetbDisableGoalDelay() --> unsigned long");
		cl.def("SetbDisableGoalDelay", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbDisableGoalDelay, "C++: ServerWrapper::SetbDisableGoalDelay(unsigned long) --> void", pybind11::arg("newbDisableGoalDelay"));
		cl.def("GetbShowNoScorerGoalMessage", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbShowNoScorerGoalMessage, "C++: ServerWrapper::GetbShowNoScorerGoalMessage() --> unsigned long");
		cl.def("SetbShowNoScorerGoalMessage", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbShowNoScorerGoalMessage, "C++: ServerWrapper::SetbShowNoScorerGoalMessage(unsigned long) --> void", pybind11::arg("newbShowNoScorerGoalMessage"));
		cl.def("GetbMatchEnded", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbMatchEnded, "C++: ServerWrapper::GetbMatchEnded() --> unsigned long");
		cl.def("SetbMatchEnded", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbMatchEnded, "C++: ServerWrapper::SetbMatchEnded(unsigned long) --> void", pybind11::arg("newbMatchEnded"));
		cl.def("GetbShowIntroScene", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbShowIntroScene, "C++: ServerWrapper::GetbShowIntroScene() --> unsigned long");
		cl.def("SetbShowIntroScene", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbShowIntroScene, "C++: ServerWrapper::SetbShowIntroScene(unsigned long) --> void", pybind11::arg("newbShowIntroScene"));
		cl.def("GetbClubMatch", (unsigned long (ServerWrapper::*)()) &ServerWrapper::GetbClubMatch, "C++: ServerWrapper::GetbClubMatch() --> unsigned long");
		cl.def("SetbClubMatch", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetbClubMatch, "C++: ServerWrapper::SetbClubMatch(unsigned long) --> void", pybind11::arg("newbClubMatch"));
		cl.def("GetNextSpawnIndex", (int (ServerWrapper::*)()) &ServerWrapper::GetNextSpawnIndex, "C++: ServerWrapper::GetNextSpawnIndex() --> int");
		cl.def("SetNextSpawnIndex", (void (ServerWrapper::*)(int)) &ServerWrapper::SetNextSpawnIndex, "C++: ServerWrapper::SetNextSpawnIndex(int) --> void", pybind11::arg("newNextSpawnIndex"));
		cl.def("GetReplayDirectorArchetype", (class ReplayDirectorWrapper (ServerWrapper::*)()) &ServerWrapper::GetReplayDirectorArchetype, "C++: ServerWrapper::GetReplayDirectorArchetype() --> class ReplayDirectorWrapper");
		cl.def("SetReplayDirectorArchetype", (void (ServerWrapper::*)(class ReplayDirectorWrapper)) &ServerWrapper::SetReplayDirectorArchetype, "C++: ServerWrapper::SetReplayDirectorArchetype(class ReplayDirectorWrapper) --> void", pybind11::arg("newReplayDirectorArchetype"));
		cl.def("GetReplayDirector", (class ReplayDirectorWrapper (ServerWrapper::*)()) &ServerWrapper::GetReplayDirector, "C++: ServerWrapper::GetReplayDirector() --> class ReplayDirectorWrapper");
		cl.def("SetReplayDirector", (void (ServerWrapper::*)(class ReplayDirectorWrapper)) &ServerWrapper::SetReplayDirector, "C++: ServerWrapper::SetReplayDirector(class ReplayDirectorWrapper) --> void", pybind11::arg("newReplayDirector"));
		cl.def("GetGameBalls", (class ArrayWrapper<class BallWrapper> (ServerWrapper::*)()) &ServerWrapper::GetGameBalls, "C++: ServerWrapper::GetGameBalls() --> class ArrayWrapper<class BallWrapper>");
		cl.def("GetTotalGameBalls", (int (ServerWrapper::*)()) &ServerWrapper::GetTotalGameBalls, "C++: ServerWrapper::GetTotalGameBalls() --> int");
		cl.def("SetTotalGameBalls", (void (ServerWrapper::*)(int)) &ServerWrapper::SetTotalGameBalls, "C++: ServerWrapper::SetTotalGameBalls(int) --> void", pybind11::arg("newTotalGameBalls"));
		cl.def("GetPostGoalTime", (float (ServerWrapper::*)()) &ServerWrapper::GetPostGoalTime, "C++: ServerWrapper::GetPostGoalTime() --> float");
		cl.def("SetPostGoalTime", (void (ServerWrapper::*)(float)) &ServerWrapper::SetPostGoalTime, "C++: ServerWrapper::SetPostGoalTime(float) --> void", pybind11::arg("newPostGoalTime"));
		cl.def("GetGoals", (class ArrayWrapper<class GoalWrapper> (ServerWrapper::*)()) &ServerWrapper::GetGoals, "C++: ServerWrapper::GetGoals() --> class ArrayWrapper<class GoalWrapper>");
		cl.def("GetSecondsRemainingCountdown", (int (ServerWrapper::*)()) &ServerWrapper::GetSecondsRemainingCountdown, "C++: ServerWrapper::GetSecondsRemainingCountdown() --> int");
		cl.def("SetSecondsRemainingCountdown", (void (ServerWrapper::*)(int)) &ServerWrapper::SetSecondsRemainingCountdown, "C++: ServerWrapper::SetSecondsRemainingCountdown(int) --> void", pybind11::arg("newSecondsRemainingCountdown"));
		cl.def("GetFieldCenter", (struct Vector (ServerWrapper::*)()) &ServerWrapper::GetFieldCenter, "C++: ServerWrapper::GetFieldCenter() --> struct Vector");
		cl.def("SetFieldCenter", (void (ServerWrapper::*)(struct Vector)) &ServerWrapper::SetFieldCenter, "C++: ServerWrapper::SetFieldCenter(struct Vector) --> void", pybind11::arg("newFieldCenter"));
		cl.def("GetGameWinner", (class TeamWrapper (ServerWrapper::*)()) &ServerWrapper::GetGameWinner, "C++: ServerWrapper::GetGameWinner() --> class TeamWrapper");
		cl.def("SetGameWinner", (void (ServerWrapper::*)(class TeamWrapper)) &ServerWrapper::SetGameWinner, "C++: ServerWrapper::SetGameWinner(class TeamWrapper) --> void", pybind11::arg("newGameWinner"));
		cl.def("GetMatchWinner", (class TeamWrapper (ServerWrapper::*)()) &ServerWrapper::GetMatchWinner, "C++: ServerWrapper::GetMatchWinner() --> class TeamWrapper");
		cl.def("SetMatchWinner", (void (ServerWrapper::*)(class TeamWrapper)) &ServerWrapper::SetMatchWinner, "C++: ServerWrapper::SetMatchWinner(class TeamWrapper) --> void", pybind11::arg("newMatchWinner"));
		cl.def("GetMVP", (class PriWrapper (ServerWrapper::*)()) &ServerWrapper::GetMVP, "C++: ServerWrapper::GetMVP() --> class PriWrapper");
		cl.def("SetMVP", (void (ServerWrapper::*)(class PriWrapper)) &ServerWrapper::SetMVP, "C++: ServerWrapper::SetMVP(class PriWrapper) --> void", pybind11::arg("newMVP"));
		cl.def("GetFastestGoalPlayer", (class PriWrapper (ServerWrapper::*)()) &ServerWrapper::GetFastestGoalPlayer, "C++: ServerWrapper::GetFastestGoalPlayer() --> class PriWrapper");
		cl.def("SetFastestGoalPlayer", (void (ServerWrapper::*)(class PriWrapper)) &ServerWrapper::SetFastestGoalPlayer, "C++: ServerWrapper::SetFastestGoalPlayer(class PriWrapper) --> void", pybind11::arg("newFastestGoalPlayer"));
		cl.def("GetSlowestGoalPlayer", (class PriWrapper (ServerWrapper::*)()) &ServerWrapper::GetSlowestGoalPlayer, "C++: ServerWrapper::GetSlowestGoalPlayer() --> class PriWrapper");
		cl.def("SetSlowestGoalPlayer", (void (ServerWrapper::*)(class PriWrapper)) &ServerWrapper::SetSlowestGoalPlayer, "C++: ServerWrapper::SetSlowestGoalPlayer(class PriWrapper) --> void", pybind11::arg("newSlowestGoalPlayer"));
		cl.def("GetFurthestGoalPlayer", (class PriWrapper (ServerWrapper::*)()) &ServerWrapper::GetFurthestGoalPlayer, "C++: ServerWrapper::GetFurthestGoalPlayer() --> class PriWrapper");
		cl.def("SetFurthestGoalPlayer", (void (ServerWrapper::*)(class PriWrapper)) &ServerWrapper::SetFurthestGoalPlayer, "C++: ServerWrapper::SetFurthestGoalPlayer(class PriWrapper) --> void", pybind11::arg("newFurthestGoalPlayer"));
		cl.def("GetFastestGoalSpeed", (float (ServerWrapper::*)()) &ServerWrapper::GetFastestGoalSpeed, "C++: ServerWrapper::GetFastestGoalSpeed() --> float");
		cl.def("SetFastestGoalSpeed", (void (ServerWrapper::*)(float)) &ServerWrapper::SetFastestGoalSpeed, "C++: ServerWrapper::SetFastestGoalSpeed(float) --> void", pybind11::arg("newFastestGoalSpeed"));
		cl.def("GetSlowestGoalSpeed", (float (ServerWrapper::*)()) &ServerWrapper::GetSlowestGoalSpeed, "C++: ServerWrapper::GetSlowestGoalSpeed() --> float");
		cl.def("SetSlowestGoalSpeed", (void (ServerWrapper::*)(float)) &ServerWrapper::SetSlowestGoalSpeed, "C++: ServerWrapper::SetSlowestGoalSpeed(float) --> void", pybind11::arg("newSlowestGoalSpeed"));
		cl.def("GetFurthestGoal", (float (ServerWrapper::*)()) &ServerWrapper::GetFurthestGoal, "C++: ServerWrapper::GetFurthestGoal() --> float");
		cl.def("SetFurthestGoal", (void (ServerWrapper::*)(float)) &ServerWrapper::SetFurthestGoal, "C++: ServerWrapper::SetFurthestGoal(float) --> void", pybind11::arg("newFurthestGoal"));
		cl.def("GetReplicatedScoredOnTeam", (unsigned char (ServerWrapper::*)()) &ServerWrapper::GetReplicatedScoredOnTeam, "C++: ServerWrapper::GetReplicatedScoredOnTeam() --> unsigned char");
		cl.def("SetReplicatedScoredOnTeam", (void (ServerWrapper::*)(unsigned char)) &ServerWrapper::SetReplicatedScoredOnTeam, "C++: ServerWrapper::SetReplicatedScoredOnTeam(unsigned char) --> void", pybind11::arg("newReplicatedScoredOnTeam"));
		cl.def("GetReplicatedServerPerformanceState", (unsigned char (ServerWrapper::*)()) &ServerWrapper::GetReplicatedServerPerformanceState, "C++: ServerWrapper::GetReplicatedServerPerformanceState() --> unsigned char");
		cl.def("SetReplicatedServerPerformanceState", (void (ServerWrapper::*)(unsigned char)) &ServerWrapper::SetReplicatedServerPerformanceState, "C++: ServerWrapper::SetReplicatedServerPerformanceState(unsigned char) --> void", pybind11::arg("newReplicatedServerPerformanceState"));
		cl.def("GetRoundNum", (int (ServerWrapper::*)()) &ServerWrapper::GetRoundNum, "C++: ServerWrapper::GetRoundNum() --> int");
		cl.def("SetRoundNum", (void (ServerWrapper::*)(int)) &ServerWrapper::SetRoundNum, "C++: ServerWrapper::SetRoundNum(int) --> void", pybind11::arg("newRoundNum"));
		//cl.def("GetKickIdleReplayOffset", (float (ServerWrapper::*)()) &ServerWrapper::GetKickIdleReplayOffset, "C++: ServerWrapper::GetKickIdleReplayOffset() --> float");
		//cl.def("SetKickIdleReplayOffset", (void (ServerWrapper::*)(float)) &ServerWrapper::SetKickIdleReplayOffset, "C++: ServerWrapper::SetKickIdleReplayOffset(float) --> void", pybind11::arg("newKickIdleReplayOffset"));
		cl.def("GetAssistMaxTime", (float (ServerWrapper::*)()) &ServerWrapper::GetAssistMaxTime, "C++: ServerWrapper::GetAssistMaxTime() --> float");
		cl.def("SetAssistMaxTime", (void (ServerWrapper::*)(float)) &ServerWrapper::SetAssistMaxTime, "C++: ServerWrapper::SetAssistMaxTime(float) --> void", pybind11::arg("newAssistMaxTime"));
		cl.def("GetBallHasBeenHitStartDelay", (float (ServerWrapper::*)()) &ServerWrapper::GetBallHasBeenHitStartDelay, "C++: ServerWrapper::GetBallHasBeenHitStartDelay() --> float");
		cl.def("SetBallHasBeenHitStartDelay", (void (ServerWrapper::*)(float)) &ServerWrapper::SetBallHasBeenHitStartDelay, "C++: ServerWrapper::SetBallHasBeenHitStartDelay(float) --> void", pybind11::arg("newBallHasBeenHitStartDelay"));
		cl.def("GetPodiumDelay", (float (ServerWrapper::*)()) &ServerWrapper::GetPodiumDelay, "C++: ServerWrapper::GetPodiumDelay() --> float");
		cl.def("SetPodiumDelay", (void (ServerWrapper::*)(float)) &ServerWrapper::SetPodiumDelay, "C++: ServerWrapper::SetPodiumDelay(float) --> void", pybind11::arg("newPodiumDelay"));
		cl.def("GetPodiumTime", (float (ServerWrapper::*)()) &ServerWrapper::GetPodiumTime, "C++: ServerWrapper::GetPodiumTime() --> float");
		cl.def("SetPodiumTime", (void (ServerWrapper::*)(float)) &ServerWrapper::SetPodiumTime, "C++: ServerWrapper::SetPodiumTime(float) --> void", pybind11::arg("newPodiumTime"));
		cl.def("GetLobbyEndCountdown", (int (ServerWrapper::*)()) &ServerWrapper::GetLobbyEndCountdown, "C++: ServerWrapper::GetLobbyEndCountdown() --> int");
		cl.def("SetLobbyEndCountdown", (void (ServerWrapper::*)(int)) &ServerWrapper::SetLobbyEndCountdown, "C++: ServerWrapper::SetLobbyEndCountdown(int) --> void", pybind11::arg("newLobbyEndCountdown"));
		cl.def("GetLobbyCountdown", (int (ServerWrapper::*)()) &ServerWrapper::GetLobbyCountdown, "C++: ServerWrapper::GetLobbyCountdown() --> int");
		cl.def("SetLobbyCountdown", (void (ServerWrapper::*)(int)) &ServerWrapper::SetLobbyCountdown, "C++: ServerWrapper::SetLobbyCountdown(int) --> void", pybind11::arg("newLobbyCountdown"));
		cl.def("GetLobbyTime", (float (ServerWrapper::*)()) &ServerWrapper::GetLobbyTime, "C++: ServerWrapper::GetLobbyTime() --> float");
		cl.def("SetLobbyTime", (void (ServerWrapper::*)(float)) &ServerWrapper::SetLobbyTime, "C++: ServerWrapper::SetLobbyTime(float) --> void", pybind11::arg("newLobbyTime"));
		cl.def("GetLobbySpawnRestartTime", (int (ServerWrapper::*)()) &ServerWrapper::GetLobbySpawnRestartTime, "C++: ServerWrapper::GetLobbySpawnRestartTime() --> int");
		cl.def("SetLobbySpawnRestartTime", (void (ServerWrapper::*)(int)) &ServerWrapper::SetLobbySpawnRestartTime, "C++: ServerWrapper::SetLobbySpawnRestartTime(int) --> void", pybind11::arg("newLobbySpawnRestartTime"));
		cl.def("GetPauser", (class PlayerControllerWrapper (ServerWrapper::*)()) &ServerWrapper::GetPauser, "C++: ServerWrapper::GetPauser() --> class PlayerControllerWrapper");
		cl.def("SetPauser", (void (ServerWrapper::*)(class PlayerControllerWrapper)) &ServerWrapper::SetPauser, "C++: ServerWrapper::SetPauser(class PlayerControllerWrapper) --> void", pybind11::arg("newPauser"));
		cl.def("GetPlayerCarCount", (int (ServerWrapper::*)()) &ServerWrapper::GetPlayerCarCount, "C++: ServerWrapper::GetPlayerCarCount() --> int");
		cl.def("ReplicateSkillTiers", (void (ServerWrapper::*)()) &ServerWrapper::ReplicateSkillTiers, "C++: ServerWrapper::ReplicateSkillTiers() --> void");
		cl.def("RemoveTeamSelection", (void (ServerWrapper::*)()) &ServerWrapper::RemoveTeamSelection, "C++: ServerWrapper::RemoveTeamSelection() --> void");
		cl.def("CheckStart", (void (ServerWrapper::*)()) &ServerWrapper::CheckStart, "C++: ServerWrapper::CheckStart() --> void");
		cl.def("StartLobbyTimer", (void (ServerWrapper::*)()) &ServerWrapper::StartLobbyTimer, "C++: ServerWrapper::StartLobbyTimer() --> void");
		cl.def("HandleCountdownTick", (void (ServerWrapper::*)()) &ServerWrapper::HandleCountdownTick, "C++: ServerWrapper::HandleCountdownTick() --> void");
		cl.def("CheckForCountdownAction", (void (ServerWrapper::*)()) &ServerWrapper::CheckForCountdownAction, "C++: ServerWrapper::CheckForCountdownAction() --> void");
		cl.def("LobbyCountdownTick", (void (ServerWrapper::*)()) &ServerWrapper::LobbyCountdownTick, "C++: ServerWrapper::LobbyCountdownTick() --> void");
		cl.def("CanSpawnBots", (bool (ServerWrapper::*)()) &ServerWrapper::CanSpawnBots, "C++: ServerWrapper::CanSpawnBots() --> bool");
		cl.def("StartRound", (void (ServerWrapper::*)()) &ServerWrapper::StartRound, "C++: ServerWrapper::StartRound() --> void");
		cl.def("EndRound", (void (ServerWrapper::*)()) &ServerWrapper::EndRound, "C++: ServerWrapper::EndRound() --> void");
		cl.def("SetBallEventListeners", (void (ServerWrapper::*)(class BallWrapper, unsigned long)) &ServerWrapper::SetBallEventListeners, "C++: ServerWrapper::SetBallEventListeners(class BallWrapper, unsigned long) --> void", pybind11::arg("Ball"), pybind11::arg("bListen"));
		cl.def("CanAwardPoints", (bool (ServerWrapper::*)()) &ServerWrapper::CanAwardPoints, "C++: ServerWrapper::CanAwardPoints() --> bool");
		cl.def("HandleCarTouch", (void (ServerWrapper::*)(class BallWrapper, class CarWrapper, unsigned char)) &ServerWrapper::HandleCarTouch, "C++: ServerWrapper::HandleCarTouch(class BallWrapper, class CarWrapper, unsigned char) --> void", pybind11::arg("Ball"), pybind11::arg("HitCar"), pybind11::arg("HitType"));
		cl.def("SetBallHasBeenHit2", (void (ServerWrapper::*)()) &ServerWrapper::SetBallHasBeenHit2, "C++: ServerWrapper::SetBallHasBeenHit2() --> void");
		cl.def("DetermineScoreTouchIndex", (int (ServerWrapper::*)(class BallWrapper, class GoalWrapper)) &ServerWrapper::DetermineScoreTouchIndex, "C++: ServerWrapper::DetermineScoreTouchIndex(class BallWrapper, class GoalWrapper) --> int", pybind11::arg("Ball"), pybind11::arg("Goal"));
		cl.def("DetermineAssistTouchIndex", (int (ServerWrapper::*)(class BallWrapper, int)) &ServerWrapper::DetermineAssistTouchIndex, "C++: ServerWrapper::DetermineAssistTouchIndex(class BallWrapper, int) --> int", pybind11::arg("Ball"), pybind11::arg("ScoreIdx"));
		cl.def("UpdateTotalGameTimePlayed", (void (ServerWrapper::*)(float)) &ServerWrapper::UpdateTotalGameTimePlayed, "C++: ServerWrapper::UpdateTotalGameTimePlayed(float) --> void", pybind11::arg("DeltaTime"));
		cl.def("UpdateGameTime", (void (ServerWrapper::*)(float)) &ServerWrapper::UpdateGameTime, "C++: ServerWrapper::UpdateGameTime(float) --> void", pybind11::arg("DeltaTime"));
		cl.def("CanUpdateGameTime", (bool (ServerWrapper::*)()) &ServerWrapper::CanUpdateGameTime, "C++: ServerWrapper::CanUpdateGameTime() --> bool");
		//cl.def("WaitForBallOnGround", (void (ServerWrapper::*)()) &ServerWrapper::WaitForBallOnGround, "C++: ServerWrapper::WaitForBallOnGround() --> void");
		//cl.def("BallHitGround", (bool (ServerWrapper::*)(struct Vector &)) &ServerWrapper::BallHitGround, "C++: ServerWrapper::BallHitGround(struct Vector &) --> bool", pybind11::arg("HitNorm"));
		//cl.def("HandleBallHitGround", (void (ServerWrapper::*)(class BallWrapper, struct Vector &, struct Vector &)) &ServerWrapper::HandleBallHitGround, "C++: ServerWrapper::HandleBallHitGround(class BallWrapper, struct Vector &, struct Vector &) --> void", pybind11::arg("Ball"), pybind11::arg("HitLoc"), pybind11::arg("HitNorm"));
		//cl.def("HandleBallHitGroundTimeout", (void (ServerWrapper::*)()) &ServerWrapper::HandleBallHitGroundTimeout, "C++: ServerWrapper::HandleBallHitGroundTimeout() --> void");
		cl.def("StartReplay", (void (ServerWrapper::*)()) &ServerWrapper::StartReplay, "C++: ServerWrapper::StartReplay() --> void");
		cl.def("HandleReplayFinished", (void (ServerWrapper::*)(class ReplayDirectorWrapper)) &ServerWrapper::HandleReplayFinished, "C++: ServerWrapper::HandleReplayFinished(class ReplayDirectorWrapper) --> void", pybind11::arg("InReplay"));
		cl.def("GotoPodiumSpotlight", (void (ServerWrapper::*)()) &ServerWrapper::GotoPodiumSpotlight, "C++: ServerWrapper::GotoPodiumSpotlight() --> void");
		cl.def("UpdateSpotlight", (void (ServerWrapper::*)()) &ServerWrapper::UpdateSpotlight, "C++: ServerWrapper::UpdateSpotlight() --> void");
		cl.def("SpawnPodiumCars", (void (ServerWrapper::*)()) &ServerWrapper::SpawnPodiumCars, "C++: ServerWrapper::SpawnPodiumCars() --> void");
		cl.def("CanEnableCarPodiumMovement", (bool (ServerWrapper::*)()) &ServerWrapper::CanEnableCarPodiumMovement, "C++: ServerWrapper::CanEnableCarPodiumMovement() --> bool");
		cl.def("FinishEvent", (void (ServerWrapper::*)()) &ServerWrapper::FinishEvent, "C++: ServerWrapper::FinishEvent() --> void");
		cl.def("__GameEvent_Soccar_TA__UpdateTeamScores", (bool (ServerWrapper::*)(class TeamWrapper)) &ServerWrapper::__GameEvent_Soccar_TA__UpdateTeamScores, "C++: ServerWrapper::__GameEvent_Soccar_TA__UpdateTeamScores(class TeamWrapper) --> bool", pybind11::arg("T"));
		cl.def("__GameEvent_Soccar_TA__SubmitMatchComplete", (void (ServerWrapper::*)(class PriWrapper)) &ServerWrapper::__GameEvent_Soccar_TA__SubmitMatchComplete, "C++: ServerWrapper::__GameEvent_Soccar_TA__SubmitMatchComplete(class PriWrapper) --> void", pybind11::arg("PRI"));
		cl.def("__GameEvent_Soccar_TA__CheckStart", (void (ServerWrapper::*)(class TeamWrapper)) &ServerWrapper::__GameEvent_Soccar_TA__CheckStart, "C++: ServerWrapper::__GameEvent_Soccar_TA__CheckStart(class TeamWrapper) --> void", pybind11::arg("T"));
		cl.def("__GameEvent_Soccar_TA__EndState", (void (ServerWrapper::*)(class TeamWrapper)) &ServerWrapper::__GameEvent_Soccar_TA__EndState, "C++: ServerWrapper::__GameEvent_Soccar_TA__EndState(class TeamWrapper) --> void", pybind11::arg("T"));
		cl.def("__ReplicatedServerPerformanceState__ChangeNotifyFunc", (void (ServerWrapper::*)()) &ServerWrapper::__ReplicatedServerPerformanceState__ChangeNotifyFunc, "C++: ServerWrapper::__ReplicatedServerPerformanceState__ChangeNotifyFunc() --> void");
		cl.def("__bClubMatch__ChangeNotifyFunc", (void (ServerWrapper::*)()) &ServerWrapper::__bClubMatch__ChangeNotifyFunc, "C++: ServerWrapper::__bClubMatch__ChangeNotifyFunc() --> void");
		cl.def("__bShowIntroScene__ChangeNotifyFunc", (void (ServerWrapper::*)()) &ServerWrapper::__bShowIntroScene__ChangeNotifyFunc, "C++: ServerWrapper::__bShowIntroScene__ChangeNotifyFunc() --> void");
		cl.def("__WaitTimeRemaining__ChangeNotifyFunc", (void (ServerWrapper::*)()) &ServerWrapper::__WaitTimeRemaining__ChangeNotifyFunc, "C++: ServerWrapper::__WaitTimeRemaining__ChangeNotifyFunc() --> void");
		cl.def("CheckJoinInProgress", (void (ServerWrapper::*)(class PriWrapper)) &ServerWrapper::CheckJoinInProgress, "C++: ServerWrapper::CheckJoinInProgress(class PriWrapper) --> void", pybind11::arg("PRI"));
		cl.def("AllowDynamicCrowd", (bool (ServerWrapper::*)()) &ServerWrapper::AllowDynamicCrowd, "C++: ServerWrapper::AllowDynamicCrowd() --> bool");
		cl.def("AddBallTrajectory", (void (ServerWrapper::*)(class BallWrapper)) &ServerWrapper::AddBallTrajectory, "C++: ServerWrapper::AddBallTrajectory(class BallWrapper) --> void", pybind11::arg("InBall"));
		cl.def("ShowScorerGoalMessage", (bool (ServerWrapper::*)()) &ServerWrapper::ShowScorerGoalMessage, "C++: ServerWrapper::ShowScorerGoalMessage() --> bool");
		cl.def("CanUseBallCam", (bool (ServerWrapper::*)()) &ServerWrapper::CanUseBallCam, "C++: ServerWrapper::CanUseBallCam() --> bool");
		cl.def("DisableStatXP", (bool (ServerWrapper::*)()) &ServerWrapper::DisableStatXP, "C++: ServerWrapper::DisableStatXP() --> bool");
		cl.def("SetDisableGoalDelay", (void (ServerWrapper::*)(unsigned long)) &ServerWrapper::SetDisableGoalDelay, "C++: ServerWrapper::SetDisableGoalDelay(unsigned long) --> void", pybind11::arg("bInDisableGoalDelay"));
		cl.def("ForceMatchStart", (void (ServerWrapper::*)()) &ServerWrapper::ForceMatchStart, "C++: ServerWrapper::ForceMatchStart() --> void");
		cl.def("RemoveLocalPlayer", (void (ServerWrapper::*)(class PlayerControllerWrapper)) &ServerWrapper::RemoveLocalPlayer, "C++: ServerWrapper::RemoveLocalPlayer(class PlayerControllerWrapper) --> void", pybind11::arg("Player"));
		cl.def("AddLocalPlayer", (void (ServerWrapper::*)(class PlayerControllerWrapper)) &ServerWrapper::AddLocalPlayer, "C++: ServerWrapper::AddLocalPlayer(class PlayerControllerWrapper) --> void", pybind11::arg("Player"));
		cl.def("DestroyGoalIndicators", (void (ServerWrapper::*)(class PlayerControllerWrapper)) &ServerWrapper::DestroyGoalIndicators, "C++: ServerWrapper::DestroyGoalIndicators(class PlayerControllerWrapper) --> void", pybind11::arg("Player"));
		cl.def("CreateGoalIndicators", (void (ServerWrapper::*)(class PlayerControllerWrapper)) &ServerWrapper::CreateGoalIndicators, "C++: ServerWrapper::CreateGoalIndicators(class PlayerControllerWrapper) --> void", pybind11::arg("Player"));
		cl.def("BeginHighlightsReplay", (void (ServerWrapper::*)()) &ServerWrapper::BeginHighlightsReplay, "C++: ServerWrapper::BeginHighlightsReplay() --> void");
		cl.def("ShouldCountUp", (bool (ServerWrapper::*)()) &ServerWrapper::ShouldCountUp, "C++: ServerWrapper::ShouldCountUp() --> bool");
		cl.def("ShouldAllowVoteToForfeit", (bool (ServerWrapper::*)()) &ServerWrapper::ShouldAllowVoteToForfeit, "C++: ServerWrapper::ShouldAllowVoteToForfeit() --> bool");
		cl.def("ShouldHaveLeaveMatchPenalty", (bool (ServerWrapper::*)()) &ServerWrapper::ShouldHaveLeaveMatchPenalty, "C++: ServerWrapper::ShouldHaveLeaveMatchPenalty() --> bool");
		cl.def("SetPaused", (void (ServerWrapper::*)(class PlayerControllerWrapper, unsigned long)) &ServerWrapper::SetPaused, "C++: ServerWrapper::SetPaused(class PlayerControllerWrapper, unsigned long) --> void", pybind11::arg("InPauser"), pybind11::arg("bInPaused"));
		cl.def("ShouldCountdownResumeFromPause", (bool (ServerWrapper::*)()) &ServerWrapper::ShouldCountdownResumeFromPause, "C++: ServerWrapper::ShouldCountdownResumeFromPause() --> bool");
		cl.def("SetScoreAndTime", (void (ServerWrapper::*)(class PlayerControllerWrapper, int, int, int, unsigned long, unsigned long)) &ServerWrapper::SetScoreAndTime, "C++: ServerWrapper::SetScoreAndTime(class PlayerControllerWrapper, int, int, int, unsigned long, unsigned long) --> void", pybind11::arg("PC"), pybind11::arg("NewScoreTeam0"), pybind11::arg("NewScoreTeam1"), pybind11::arg("InGameTimeRemaining"), pybind11::arg("bInOvertime"), pybind11::arg("bRestartRound"));
		cl.def("SaveLocalPlayerStats", (void (ServerWrapper::*)()) &ServerWrapper::SaveLocalPlayerStats, "C++: ServerWrapper::SaveLocalPlayerStats() --> void");
		cl.def("ShouldPlayReplay", (bool (ServerWrapper::*)()) &ServerWrapper::ShouldPlayReplay, "C++: ServerWrapper::ShouldPlayReplay() --> bool");
		cl.def("ShouldRecordReplay", (bool (ServerWrapper::*)()) &ServerWrapper::ShouldRecordReplay, "C++: ServerWrapper::ShouldRecordReplay() --> bool");
		cl.def("OnBallHasBeenHit", (void (ServerWrapper::*)()) &ServerWrapper::OnBallHasBeenHit, "C++: ServerWrapper::OnBallHasBeenHit() --> void");
		cl.def("GetTotalScore", (int (ServerWrapper::*)()) &ServerWrapper::GetTotalScore, "C++: ServerWrapper::GetTotalScore() --> int");
		cl.def("HandleCarSet", (void (ServerWrapper::*)(class PriWrapper)) &ServerWrapper::HandleCarSet, "C++: ServerWrapper::HandleCarSet(class PriWrapper) --> void", pybind11::arg("InPRI"));
		cl.def("RemovePRI", (void (ServerWrapper::*)(class PriWrapper)) &ServerWrapper::RemovePRI, "C++: ServerWrapper::RemovePRI(class PriWrapper) --> void", pybind11::arg("PRI"));
		cl.def("AddPRI", (void (ServerWrapper::*)(class PriWrapper)) &ServerWrapper::AddPRI, "C++: ServerWrapper::AddPRI(class PriWrapper) --> void", pybind11::arg("PRI"));
		cl.def("OnMatchWinnerSet", (void (ServerWrapper::*)()) &ServerWrapper::OnMatchWinnerSet, "C++: ServerWrapper::OnMatchWinnerSet() --> void");
		cl.def("OnGameWinnerSet", (void (ServerWrapper::*)()) &ServerWrapper::OnGameWinnerSet, "C++: ServerWrapper::OnGameWinnerSet() --> void");
		cl.def("MVPSort", (int (ServerWrapper::*)(class PriWrapper, class PriWrapper)) &ServerWrapper::MVPSort, "C++: ServerWrapper::MVPSort(class PriWrapper, class PriWrapper) --> int", pybind11::arg("A"), pybind11::arg("B"));
		cl.def("HandleHitGoal", (void (ServerWrapper::*)(class BallWrapper, class GoalWrapper)) &ServerWrapper::HandleHitGoal, "C++: ServerWrapper::HandleHitGoal(class BallWrapper, class GoalWrapper) --> void", pybind11::arg("Ball"), pybind11::arg("Goal"));
		cl.def("ClearReplicatedScoredOnTeam", (void (ServerWrapper::*)()) &ServerWrapper::ClearReplicatedScoredOnTeam, "C++: ServerWrapper::ClearReplicatedScoredOnTeam() --> void");
		cl.def("TriggerScoreChangedEvent", (void (ServerWrapper::*)()) &ServerWrapper::TriggerScoreChangedEvent, "C++: ServerWrapper::TriggerScoreChangedEvent() --> void");
		cl.def("HandleScoreUpdated", (void (ServerWrapper::*)(class TeamWrapper)) &ServerWrapper::HandleScoreUpdated, "C++: ServerWrapper::HandleScoreUpdated(class TeamWrapper) --> void", pybind11::arg("Team"));
		cl.def("OnAllTeamsCreated", (void (ServerWrapper::*)()) &ServerWrapper::OnAllTeamsCreated, "C++: ServerWrapper::OnAllTeamsCreated() --> void");
		cl.def("TriggerGoalScoreEvent", (void (ServerWrapper::*)(int, class CarWrapper)) &ServerWrapper::TriggerGoalScoreEvent, "C++: ServerWrapper::TriggerGoalScoreEvent(int, class CarWrapper) --> void", pybind11::arg("TeamScoredOn"), pybind11::arg("Scorer"));
		cl.def("SetTotalGameBalls2", (void (ServerWrapper::*)(int)) &ServerWrapper::SetTotalGameBalls2, "C++: ServerWrapper::SetTotalGameBalls2(int) --> void", pybind11::arg("TotalBalls"));
		cl.def("RecordRecentPlayers", (void (ServerWrapper::*)()) &ServerWrapper::RecordRecentPlayers, "C++: ServerWrapper::RecordRecentPlayers() --> void");
		cl.def("UpdateStats", (void (ServerWrapper::*)()) &ServerWrapper::UpdateStats, "C++: ServerWrapper::UpdateStats() --> void");
		cl.def("NotifyKismetOfCurrentTime", (void (ServerWrapper::*)()) &ServerWrapper::NotifyKismetOfCurrentTime, "C++: ServerWrapper::NotifyKismetOfCurrentTime() --> void");
		cl.def("EnoughTimePassedToForfeit", (bool (ServerWrapper::*)()) &ServerWrapper::EnoughTimePassedToForfeit, "C++: ServerWrapper::EnoughTimePassedToForfeit() --> bool");
		cl.def("OnGameTimeUpdated", (void (ServerWrapper::*)()) &ServerWrapper::OnGameTimeUpdated, "C++: ServerWrapper::OnGameTimeUpdated() --> void");
		cl.def("OnOvertimeUpdated", (void (ServerWrapper::*)()) &ServerWrapper::OnOvertimeUpdated, "C++: ServerWrapper::OnOvertimeUpdated() --> void");
		cl.def("ForceOvertime", (void (ServerWrapper::*)()) &ServerWrapper::ForceOvertime, "C++: ServerWrapper::ForceOvertime() --> void");
		cl.def("StartOvertime", (void (ServerWrapper::*)()) &ServerWrapper::StartOvertime, "C++: ServerWrapper::StartOvertime() --> void");
		cl.def("OnMyHalf", (bool (ServerWrapper::*)(struct Vector &, unsigned char)) &ServerWrapper::OnMyHalf, "C++: ServerWrapper::OnMyHalf(struct Vector &, unsigned char) --> bool", pybind11::arg("TestLocation"), pybind11::arg("TeamNum"));
		cl.def("GetWinningTeam", (class TeamWrapper (ServerWrapper::*)()) &ServerWrapper::GetWinningTeam, "C++: ServerWrapper::GetWinningTeam() --> class TeamWrapper");
		cl.def("ResetPickups", (void (ServerWrapper::*)()) &ServerWrapper::ResetPickups, "C++: ServerWrapper::ResetPickups() --> void");
		cl.def("ResetPlayers", (void (ServerWrapper::*)()) &ServerWrapper::ResetPlayers, "C++: ServerWrapper::ResetPlayers() --> void");
		cl.def("OnBallSpawned", (void (ServerWrapper::*)(class BallWrapper)) &ServerWrapper::OnBallSpawned, "C++: ServerWrapper::OnBallSpawned(class BallWrapper) --> void", pybind11::arg("NewBall"));
		cl.def("ResetBalls", (void (ServerWrapper::*)()) &ServerWrapper::ResetBalls, "C++: ServerWrapper::ResetBalls() --> void");
		cl.def("DestroyCars", (void (ServerWrapper::*)()) &ServerWrapper::DestroyCars, "C++: ServerWrapper::DestroyCars() --> void");
		cl.def("FreezePawns", (void (ServerWrapper::*)()) &ServerWrapper::FreezePawns, "C++: ServerWrapper::FreezePawns() --> void");
		cl.def("DestroyBalls", (void (ServerWrapper::*)()) &ServerWrapper::DestroyBalls, "C++: ServerWrapper::DestroyBalls() --> void");
		cl.def("RemoveGameBall", (void (ServerWrapper::*)(class BallWrapper)) &ServerWrapper::RemoveGameBall, "C++: ServerWrapper::RemoveGameBall(class BallWrapper) --> void", pybind11::arg("Ball"));
		cl.def("AddGameBall", (void (ServerWrapper::*)(class BallWrapper)) &ServerWrapper::AddGameBall, "C++: ServerWrapper::AddGameBall(class BallWrapper) --> void", pybind11::arg("Ball"));
		cl.def("StartNewRound", (void (ServerWrapper::*)()) &ServerWrapper::StartNewRound, "C++: ServerWrapper::StartNewRound() --> void");
		cl.def("CheckForAutoBalance", (void (ServerWrapper::*)()) &ServerWrapper::CheckForAutoBalance, "C++: ServerWrapper::CheckForAutoBalance() --> void");
		cl.def("HasWinner", (bool (ServerWrapper::*)()) &ServerWrapper::HasWinner, "C++: ServerWrapper::HasWinner() --> bool");
		cl.def("SubmitMatch2", (void (ServerWrapper::*)()) &ServerWrapper::SubmitMatch2, "C++: ServerWrapper::SubmitMatch2() --> void");
		cl.def("SubmitMatchComplete2", (void (ServerWrapper::*)()) &ServerWrapper::SubmitMatchComplete2, "C++: ServerWrapper::SubmitMatchComplete2() --> void");
		cl.def("OnMatchEnded", (void (ServerWrapper::*)()) &ServerWrapper::OnMatchEnded, "C++: ServerWrapper::OnMatchEnded() --> void");
		cl.def("ShouldDoPodiumSpotlight", (bool (ServerWrapper::*)()) &ServerWrapper::ShouldDoPodiumSpotlight, "C++: ServerWrapper::ShouldDoPodiumSpotlight() --> bool");
		cl.def("EndGame", (void (ServerWrapper::*)()) &ServerWrapper::EndGame, "C++: ServerWrapper::EndGame() --> void");
		cl.def("UpdateTeamScores2", (void (ServerWrapper::*)()) &ServerWrapper::UpdateTeamScores2, "C++: ServerWrapper::UpdateTeamScores2() --> void");
		cl.def("StartNewGame", (void (ServerWrapper::*)()) &ServerWrapper::StartNewGame, "C++: ServerWrapper::StartNewGame() --> void");
		cl.def("ResetGame", (void (ServerWrapper::*)()) &ServerWrapper::ResetGame, "C++: ServerWrapper::ResetGame() --> void");
		cl.def("ClearReplicatedStatEvent", (void (ServerWrapper::*)()) &ServerWrapper::ClearReplicatedStatEvent, "C++: ServerWrapper::ClearReplicatedStatEvent() --> void");
		cl.def("eventDestroyed", (void (ServerWrapper::*)()) &ServerWrapper::eventDestroyed, "C++: ServerWrapper::eventDestroyed() --> void");
		cl.def("InitBotDetection", (void (ServerWrapper::*)()) &ServerWrapper::InitBotDetection, "C++: ServerWrapper::InitBotDetection() --> void");
		cl.def("InitCrowdManager", (void (ServerWrapper::*)()) &ServerWrapper::InitCrowdManager, "C++: ServerWrapper::InitCrowdManager() --> void");
		cl.def("InitField", (void (ServerWrapper::*)()) &ServerWrapper::InitField, "C++: ServerWrapper::InitField() --> void");
		cl.def("InitGameObserver", (void (ServerWrapper::*)()) &ServerWrapper::InitGameObserver, "C++: ServerWrapper::InitGameObserver() --> void");
		cl.def("OnInit", (void (ServerWrapper::*)()) &ServerWrapper::OnInit, "C++: ServerWrapper::OnInit() --> void");
		cl.def("InitMutators", (void (ServerWrapper::*)()) &ServerWrapper::InitMutators, "C++: ServerWrapper::InitMutators() --> void");
		cl.def("OnClubMatch", (void (ServerWrapper::*)()) &ServerWrapper::OnClubMatch, "C++: ServerWrapper::OnClubMatch() --> void");
		cl.def("CanInitClubMatch", (bool (ServerWrapper::*)()) &ServerWrapper::CanInitClubMatch, "C++: ServerWrapper::CanInitClubMatch() --> bool");
		cl.def("AssignCustomTeamSettings", (void (ServerWrapper::*)()) &ServerWrapper::AssignCustomTeamSettings, "C++: ServerWrapper::AssignCustomTeamSettings() --> void");
		cl.def("EventGameWinnerSet", (void (ServerWrapper::*)(class ServerWrapper)) &ServerWrapper::EventGameWinnerSet, "C++: ServerWrapper::EventGameWinnerSet(class ServerWrapper) --> void", pybind11::arg("GameEvent"));
		cl.def("EventGoalScored", (void (ServerWrapper::*)(class ServerWrapper, class BallWrapper, class GoalWrapper, int, int)) &ServerWrapper::EventGoalScored, "C++: ServerWrapper::EventGoalScored(class ServerWrapper, class BallWrapper, class GoalWrapper, int, int) --> void", pybind11::arg("GameEvent"), pybind11::arg("Ball"), pybind11::arg("Goal"), pybind11::arg("ScoreIndex"), pybind11::arg("AssistIdx"));
	}
}
